<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MoiBlog</title>
    <description>这里是 @Moi黎子豪 的个人博客，与你一起发现更大的世界 | 要做一个有 swag 的程序员</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 Mar 2024 13:38:03 +0800</pubDate>
    <lastBuildDate>Wed, 27 Mar 2024 13:38:03 +0800</lastBuildDate>
    <generator>Jekyll v4.3.3</generator>
    
      <item>
        <title>对未来的自己的要求</title>
        <description>&lt;div align=&quot;life&quot;&gt; 
&lt;iframe frameborder=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;400&quot; height=&quot;140&quot; src=&quot;https://music.163.com/outchain/player?type=2&amp;amp;id=1831400576&amp;amp;auto=1&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h1 id=&quot;你有没有更爱自己的家人&quot;&gt;你有没有更爱自己的家人&lt;/h1&gt;
</description>
        <pubDate>Mon, 12 Jun 2034 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2034/06/12/Future/</link>
        <guid isPermaLink="true">http://localhost:4000/2034/06/12/Future/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>美化vscode</title>
        <description>&lt;p&gt;VSCode 是一款功能强大的代码编辑器，深受程序员的喜爱。但是，默认的设置可能并不适合所有人。通过一些简单的美化，可以为程序员提供更好的编程体验。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/屏幕截图 2024-03-27 132134.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先我们要安装 background这个插件 publisher:”shalldie”&lt;/p&gt;

&lt;p&gt;然后打开拓展的设置
&lt;img src=&quot;/img/屏幕截图 2024-03-27 132646.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击拓展设置，找到在setting.json中编辑
找到这段代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &quot;background.fullscreen&quot;: {
    &quot;images&quot;: [&quot;https://api.paugram.com/wallpaper/?source=sm&quot;],
    &quot;opacity&quot;: 0.91,
    &quot;size&quot;: &quot;cover&quot;,
    &quot;position&quot;: &quot;center&quot;,
    &quot;interval&quot;: 0
  },
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中imges这段api是一个随机壁纸的api，可以更换成其他壁纸的api都是动漫风的
大家可以去这位大佬看看其他的api
https://api.paugram.com/help/wallpaper&lt;/p&gt;

&lt;p&gt;还有就是背景主题的插件
Ayu
&lt;img src=&quot;/img/屏幕截图 2024-03-27 133428.png&quot; /&gt;
点击设置颜色主题就可以选择了&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Mar 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/03/27/%E7%BE%8E%E5%8C%96vscode.2024/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/03/27/%E7%BE%8E%E5%8C%96vscode.2024/</guid>
        
        <category>vscode</category>
        
        
      </item>
    
      <item>
        <title>学习tailwind</title>
        <description>&lt;h2 id=&quot;学习-tailwind--入门&quot;&gt;学习 tailwind -入门&lt;/h2&gt;

&lt;p&gt;这篇文章主要就是用来学习 tailwindcss，但是过程可能会有点散乱，因为是在学习的项目的过程中学的。&lt;/p&gt;

&lt;h3 id=&quot;首先&quot;&gt;首先&lt;/h3&gt;

&lt;p&gt;tailwindcss 是一个 css 框架，它提供了一系列的 css 类，这些类可以用来快速地生成常见的 css 样式，例如字体大小、颜色、边框等。
我们先通过 create vite 来创建 vite 项目，推荐使用 cnpm 或者 pnpm 这里我们使用 npm。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;npm creat vite
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;project 名我们取 tailwind+vite 就行了，大家可以随便取。&lt;/p&gt;

&lt;p&gt;framework 我们选择 Vue，variant 我们选择 JavaScript，对于入门学习 js 最好。&lt;/p&gt;

&lt;p&gt;打开 vscode 选择文件夹&lt;/p&gt;

&lt;p&gt;安装必要的依赖&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cnpm i
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们安装 tailwindcss 和 postcss autoprefixer&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cnpm i tailwindcss postcss autoprefixer -D
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进行初始化&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  npx tailwindcss init -p
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时会出现两个额外的文件
Created Tailwind CSS config file: tailwind.config.js
Created PostCSS config file: postcss.config.js&lt;/p&gt;

&lt;p&gt;我们对 tailwind.config.js 进行配置&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  /** @type {import(&apos;tailwindcss&apos;).Config} */
export default {
  content: [ 
    &quot;./index.html&quot;,
    &quot;./src/**/*.{vue,js,ts,jsx,tsx}&quot;,],
  theme: {
    extend: {},
  },
  plugins: [],
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;清除没必要的 src 下的代码
删除 compoents 文件夹
App.vue 下的代码如下&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &amp;lt;script setup&amp;gt;

&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;

&amp;lt;/template&amp;gt;

&amp;lt;style scoped&amp;gt;

&amp;lt;/style&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果没有错误删除 src 下面应该有个 style.css 文件，没有的话可以创建一个。初始化该文件，写入如下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在App.vue文件中测试&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  
&amp;lt;template&amp;gt;
  &amp;lt;div class=&quot;bg-white&quot;&amp;gt;
    &amp;lt;div class=&quot;mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8&quot;&amp;gt;
      &amp;lt;h2 class=&quot;text-2xl font-bold tracking-tight text-gray-900&quot;&amp;gt;Customers also purchased&amp;lt;/h2&amp;gt;

      &amp;lt;div class=&quot;mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8&quot;&amp;gt;
        &amp;lt;div v-for=&quot;product in products&quot; :key=&quot;product.id&quot; class=&quot;group relative&quot;&amp;gt;
          &amp;lt;div class=&quot;aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-80&quot;&amp;gt;
            &amp;lt;img :src=&quot;product.imageSrc&quot; :alt=&quot;product.imageAlt&quot; class=&quot;h-full w-full object-cover object-center lg:h-full lg:w-full&quot; /&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class=&quot;mt-4 flex justify-between&quot;&amp;gt;
            &amp;lt;div&amp;gt;
              &amp;lt;h3 class=&quot;text-sm text-gray-700&quot;&amp;gt;
                &amp;lt;a :href=&quot;product.href&quot;&amp;gt;
                  &amp;lt;span aria-hidden=&quot;true&quot; class=&quot;absolute inset-0&quot; /&amp;gt;
                  
                &amp;lt;/a&amp;gt;
              &amp;lt;/h3&amp;gt;
              &amp;lt;p class=&quot;mt-1 text-sm text-gray-500&quot;&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;p class=&quot;text-sm font-medium text-gray-900&quot;&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup&amp;gt;
const products = [
  {
    id: 1,
    name: &apos;Basic Tee&apos;,
    href: &apos;#&apos;,
    imageSrc: &apos;https://tailwindui.com/img/ecommerce-images/product-page-01-related-product-01.jpg&apos;,
    imageAlt: &quot;Front of men&apos;s Basic Tee in black.&quot;,
    price: &apos;$35&apos;,
    color: &apos;Black&apos;,
  },
  // More products...
]
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 27 Mar 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/03/27/tailwindcss.2024/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/03/27/tailwindcss.2024/</guid>
        
        <category>css</category>
        
        <category>tailwind</category>
        
        <category>daily</category>
        
        <category>vite</category>
        
        <category>vue</category>
        
        
      </item>
    
      <item>
        <title>如何搭建个人Cli脚手架(一)</title>
        <description>&lt;h2 id=&quot;首先&quot;&gt;首先&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，你需要一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;环境，你可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvm&lt;/code&gt;来安装&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;。&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;               nvm install node
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其次，你需要一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;环境，你可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvm&lt;/code&gt;来安装&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm&lt;/code&gt;。&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;               nvm install npm
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;

&lt;p&gt;创建一个文件夹，并进入该文件夹,执行以下命令&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    npm init -y
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你会获得一个 package 文件&lt;/p&gt;

&lt;pre&gt;
{
  &quot;name&quot;: &quot;testcli&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
  }
}
&lt;/pre&gt;

&lt;p&gt;创建一个 bin 文件夹,并且在此文件夹中创建一个 index.js 文件,输入以下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;console.log(&quot;hello world&quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在 package.json 中添加以下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &quot;bin&quot;: {
        &quot;testcli&quot;: &quot;./bin/index.js&quot;
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在终端执行 npm link 命令，将你的脚手架链接到全局环境中&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    npm link
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在终端执行 testcli 命令，你将会看到控制台输出 “hello world”&lt;/p&gt;

&lt;h2 id=&quot;安装依赖&quot;&gt;安装依赖&lt;/h2&gt;

&lt;h3 id=&quot;commander&quot;&gt;commander&lt;/h3&gt;
&lt;p&gt;在终端安装 commander&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    npm install commander --save
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在 index.js 中添加以下代码&lt;/p&gt;

&lt;pre&gt;
#!/usr/bin/env node
// 引入程序模块
const {program} = require(&apos;commander&apos;)

program.name(&apos;my-cli&apos;).usage(&apos;&lt;command /&gt; [options}&apos;)
// 解析命令行参数
program.parse(process.argv)
&lt;/pre&gt;

&lt;p&gt;在任意目录执行 testcli –help 命令，你将会看到以下帮助信息&lt;/p&gt;

&lt;pre&gt;
Usage: my-cli [command] [options]

Options:
  -V, --version  output the version number
  -h, --help     display help for command

Commands:   
&lt;/pre&gt;

&lt;p&gt;你也可以尝试添加如下选项代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;programprogram
// 输出额外的调试信息
.option(&apos;-d,debug&apos;,&apos;output extra debugging&apos;)

// 小型披萨大小
.option(&apos;-s,small&apos;,&apos;small pizza size&apos;)

// 披萨类型
.option(&apos;-p,--pizza-type &amp;lt;type&amp;gt;&apos;,&apos;flavour of pizza&apos;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在任意终端输入 testcli –help 命令，你将会看到以下帮助信息&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Usage: my-cli &amp;lt;command&amp;gt; [options}

Options:
  -d,debug                output extra debugging
  -s,small                small pizza size
  -p,--pizza-type &amp;lt;type&amp;gt;  flavour of pizza
  -h, --help              display help for command
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进行测试在index.js中添加以下代码&lt;/p&gt;
&lt;pre&gt;
const options = program.opts()
console.log(options)
&lt;/pre&gt;

&lt;p&gt;在任意终端输入&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;testcli --debug --small --pizza-type &quot;cheese&quot; 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;命令，你将会看到以下输出&lt;/p&gt;

&lt;pre&gt;
{ debug: true, small: true, pizzaType: &apos;cheese&apos; }
&lt;/pre&gt;

&lt;p&gt;创建一个command在index.js中添加以下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    // 克隆一个仓库
program
.command(&apos;clone &amp;lt;source&amp;gt; [destination]&apos;)
.description(&apos; clone a repository into a newly created directory &apos;)
.action((source, destination) =&amp;gt; {
  console.log(&apos;clone command called&apos;)
})

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在任意终端输入 testcli –help 命令，你将会看到以下帮助信息&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    Usage: my-cli &amp;lt;command&amp;gt; [options}

Options:
  -d,debug                      output extra debugging
  -s,small                      small pizza size
  -p,--pizza-type &amp;lt;type&amp;gt;        flavour of pizza
  -h, --help                    display help for command

Commands:
  clone &amp;lt;source&amp;gt; [destination]   clone a repository into a newly created directory
  help [command]                display help for command
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;chalk&quot;&gt;chalk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chalk/chalk/386909ee0bfe4346d04e3eeba712f0db597c038d/media/logo.svg&quot; /&gt;
在终端安装 chalk,因为我们此处用的是CommonJs模块
我们此处用的是4.0.0版本&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    npm install chalk@4.0.0 --save
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;!!!&amp;lt;p style=&quot;color:red;&quot;&amp;gt;注释掉之前所用到的commander代码&amp;lt;/p&amp;gt;!!!&lt;/p&gt;

&lt;p&gt;在 index.js 中添加以下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;console.log(&apos;hello world&apos;)
console.log(chalk.red(&apos;hello world&apos;))
console.log(chalk.blue.bold(&apos;hello world&apos;))
console.log(chalk.green.bgRed(&apos;hello world&apos;))

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在任意终端输入 testcli 命令，你将会看到以下输出&lt;/p&gt;

&lt;pre&gt;
   &lt;p&gt;hello world&lt;/p&gt;
   &lt;p style=&quot;color:red;&quot;&gt; hello world&lt;/p&gt;
   &lt;p style=&quot;color:blue;&quot; bold=&quot;&quot;&gt; hello world&lt;/p&gt;
   &lt;p style=&quot;color:green; background-color:red;&quot;&gt; hello world&lt;/p&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;inquirer&quot;&gt;inquirer&lt;/h2&gt;
&lt;p&gt;安装 inquirer&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    npm install inquirer@8.0.0 --save
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 index.js 中添加以下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;const inquirer = require(&apos;inquirer&apos;)
    inquirer
.prompt([
  {
    type: &apos;input&apos;,
    name: &apos;food&apos;,
    message:&apos;what is your favorite food?&apos;,
    default:&apos;burger&apos;
  },
  {
    type: &apos;confirm&apos;,
    name: &apos;hot&apos;,
    message:&apos;are you sure?&apos;,
    default:false
  }
])
.then((answers) =&amp;gt; {
  console.log(answers)
})
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在任意终端输入 testcli 命令，你将会看到以下输出&lt;/p&gt;

&lt;pre&gt;
   &lt;p&gt;what is your favorite food?&lt;/p&gt;
   &lt;p&gt;are you sure?&lt;/p&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;ora&quot;&gt;ora&lt;/h2&gt;

&lt;p&gt;安装 ora&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    npm install ora@5.4.1 --save
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 index.js 中添加以下代码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    const ora = require(&apos;ora&apos;);
    const spinner = ora(&apos;loading&apos;).start()
setTimeout(() =&amp;gt; {
  spinner.color = &apos;yellow&apos;
  spinner.text = &apos;网络较慢...&apos;
},3000)
setTimeout(() =&amp;gt; {
spinner.fail(&apos;下载失败&apos;)
},4000)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在任意终端输入 testcli 命令，你将会看到以下输出&lt;/p&gt;

&lt;pre&gt;
   &lt;p&gt;loading&lt;/p&gt;
   &lt;p&gt;网络较慢...&lt;/p&gt;
   &lt;p&gt;下载失败&lt;/p&gt;
&lt;/pre&gt;
</description>
        <pubDate>Fri, 22 Mar 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/03/22/2024/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/03/22/2024/</guid>
        
        <category>Web</category>
        
        <category>JavaScript</category>
        
        <category>taliwind</category>
        
        <category>cli</category>
        
        <category>脚手架</category>
        
        <category>命令行</category>
        
        
      </item>
    
      <item>
        <title>我对2024前端的看法</title>
        <description>&lt;p&gt;React、Vue 和 Angular 这些老牌框架依然稳居前端开发主力军的位置，不过它们也都在不断更新迭代，加入新的功能和特性，比如 React 18 中的 Concurrent Mode、Vue 3 中的 Composition API 等等。
同时，一些新兴框架也正在崛起，比如 Svelte、Solid 等，它们凭借着轻量、高效的特点吸引了不少开发者的关注，或许在未来会成为新的主流选择。&lt;/p&gt;

&lt;p&gt;此外，Web Components 等标准化技术也将得到更广泛的应用，这将有利于提高代码的复用性和可维护性。
TypeScript 的使用也将更加普及，它可以帮助我们提高代码的类型安全性，避免一些潜在的错误。&lt;/p&gt;

&lt;p&gt;1 全栈和服务端渲染：
随着前端技术的不断发展，前端开发人员的能力也越来越强，他们不再局限于前端页面开发，而是开始向后端甚至是全栈开发方向发展。
服务端渲染 (SSR) 也是近年来一个比较热门的技术，它可以将页面在服务器端渲染成 HTML 代码，然后再发送给客户端，这样可以提高页面加载速度，并改善 SEO 效果
。&lt;/p&gt;

&lt;p&gt;2 人工智能和低代码开发：
人工智能 (AI) 正在逐渐渗透到各个领域，前端开发也不例外。一些 AI 工具可以帮助我们自动生成代码、优化性能等等，提高开发效率。
低代码/无代码开发平台也越来越流行，它们可以降低开发门槛，使更多人能够参与前端开发，这对于非技术人员来说是一个福音。&lt;/p&gt;

&lt;p&gt;3 性能和可访问性：
性能优化一直是前端开发的重要关注点，我们希望能够提供更加流畅的用户体验。
可访问性也是一个不容忽视的问题，我们需要确保所有用户都能使用我们的前端应用，包括残障人士。&lt;/p&gt;

&lt;p&gt;4 安全性和隐私：
随着网络攻击的不断增加，安全问题也越来越重要，我们需要采取必要的措施来保护我们的应用免受攻击。
用户隐私也是一个需要重视的问题，我们需要遵守相关法律法规，保护用户隐私。&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jan 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/01/10/2024/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/01/10/2024/</guid>
        
        <category>Web</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>面试题</title>
        <description>&lt;h1 id=&quot;1浏览器&quot;&gt;1.浏览器&lt;/h1&gt;

&lt;h2 id=&quot;ie-的内核&quot;&gt;Ie 的内核&lt;/h2&gt;

&lt;h3 id=&quot;1-trident-内核&quot;&gt;1. Trident 内核&lt;/h3&gt;

&lt;p&gt;IE、MaxThon、TT、The World、360、搜狗浏览器等。&lt;/p&gt;

&lt;h2 id=&quot;其他浏览器内核&quot;&gt;其他浏览器内核&lt;/h2&gt;

&lt;h3 id=&quot;2-gecko-内核&quot;&gt;2. Gecko 内核&lt;/h3&gt;

&lt;p&gt;Firefox、MozillaSuite/SeaMonkey 等。&lt;/p&gt;

&lt;h3 id=&quot;3-presto-内核&quot;&gt;3. Presto 内核&lt;/h3&gt;

&lt;p&gt;Opera 前使用的内核，现为 Blink 内核;&lt;/p&gt;

&lt;h3 id=&quot;4-webkit-内核&quot;&gt;4. Webkit 内核&lt;/h3&gt;

&lt;p&gt;Safari、Chrome 等。&lt;/p&gt;

&lt;h3 id=&quot;5-blink-内核&quot;&gt;5. Blink 内核&lt;/h3&gt;

&lt;p&gt;合并了 Webkit 和 Gecko 内核的浏览器内核。&lt;/p&gt;

&lt;h1 id=&quot;2html5-新特性&quot;&gt;2.Html5 新特性&lt;/h1&gt;

&lt;p&gt;自1999年以后HTML 4.01 已经改变了很多,今天，在HTML 4.01中的几个已经被废弃，这些元素在HTML5中已经被删除或重新定义。&lt;/p&gt;

&lt;p&gt;为了更好地处理今天的互联网应用，HTML5添加了很多新元素及功能，比如:
图形的绘制，多媒体内容，更好的页面结构，更好的形式
处理，和几个api拖放元素，定位，包括网页
应用程序缓存，存储，网络工作者，等。&lt;/p&gt;

&lt;h2&gt;1. 新元素&lt;/h2&gt;
&lt;table class=&quot;reference notranslate&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th align=&quot;left&quot; width=&quot;110&quot;&gt;标签&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-canvas.html&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; 标签定义图形，比如图表和其他图像。该标签基于 JavaScript 的绘图 API&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;2. 新多媒体元素 &lt;/h2&gt;

&lt;table class=&quot;reference&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th align=&quot;left&quot; width=&quot;110&quot;&gt;标签&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-audio.html&quot;&gt;&amp;lt;audio&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义音频内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-video.html&quot;&gt;&amp;lt;video&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义视频（video 或者 movie）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-source.html&quot;&gt;&amp;lt;source&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义多媒体资源 &amp;lt;video&amp;gt; 和 &amp;lt;audio&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-embed.html&quot;&gt;&amp;lt;embed&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义嵌入的内容，比如插件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-track.html&quot;&gt;&amp;lt;track&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;为诸如 &amp;lt;video&amp;gt; 和 &amp;lt;audio&amp;gt; 元素之类的媒介规定外部文本轨道。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;3. 新表单元素 &lt;/h2&gt;
&lt;table class=&quot;reference&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th align=&quot;left&quot; width=&quot;110&quot;&gt;标签&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-datalist.html&quot;&gt;&amp;lt;datalist&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-keygen.html&quot;&gt;&amp;lt;keygen&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;规定用于表单的密钥对生成器字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-output.html&quot;&gt;&amp;lt;output&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义不同类型的输出，比如脚本的输出。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;4. 新的语义和结构元素 &lt;/h2&gt;
&lt;p&gt;HTML5提供了新的元素来创建更好的页面结构：&lt;/p&gt;
&lt;table class=&quot;reference notranslate&quot;&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th align=&quot;left&quot; width=&quot;110&quot;&gt;标签&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-article.html&quot;&gt;&amp;lt;article&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义页面独立的内容区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-aside.html&quot;&gt;&amp;lt;aside&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义页面的侧边栏内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-bdi.html&quot;&gt;&amp;lt;bdi&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;允许您设置一段文本，使其脱离其父元素的文本方向设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-command.html&quot;&gt;&amp;lt;command&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义命令按钮，比如单选按钮、复选框或按钮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-details.html&quot;&gt;&amp;lt;details&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;用于描述文档或文档某个部分的细节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-dialog.html&quot;&gt;&amp;lt;dialog&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义对话框，比如提示框&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-summary.html&quot;&gt;&amp;lt;summary&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;标签包含 details 元素的标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-figure.html&quot;&gt;&amp;lt;figure&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;规定独立的流内容（图像、图表、照片、代码等等）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-figcaption.html&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义 &amp;lt;figure&amp;gt; 元素的标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-footer.html&quot;&gt;&amp;lt;footer&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义 section 或 document 的页脚。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-header.html&quot;&gt;&amp;lt;header&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义了文档的头部区域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-mark.html&quot;&gt;&amp;lt;mark&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义带有记号的文本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-meter.html&quot;&gt;&amp;lt;meter&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义度量衡。仅用于已知最大和最小值的度量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-nav.html&quot;&gt;&amp;lt;nav&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义导航链接的部分。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-progress.html&quot;&gt;&amp;lt;progress&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义任何类型的任务的进度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-ruby.html&quot;&gt;&amp;lt;ruby&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义 ruby 注释（中文注音或字符）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-rt.html&quot;&gt;&amp;lt;rt&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义字符（中文注音或字符）的解释或发音。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-rp.html&quot;&gt;&amp;lt;rp&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-section.html&quot;&gt;&amp;lt;section&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义文档中的节（section、区段）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-time.html&quot;&gt;&amp;lt;time&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定义日期或时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;/tags/tag-wbr.html&quot;&gt;&amp;lt;wbr&amp;gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;规定在文本中的何处适合添加换行符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;5.已移除的元素 &lt;/h2&gt;
&lt;p&gt;以下的 HTML 4.01 元素在HTML5中已经被删除:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;acronym&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;applet&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;basefont&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;big&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;center&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;dir&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;font&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;frame&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;frameset&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;noframes&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;strike&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;tt&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 03 Jan 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/01/03/2024/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/01/03/2024/</guid>
        
        <category>Web</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>vue-router细讲</title>
        <description>&lt;h1&gt; vue-router细讲&lt;/h1&gt;

&lt;p&gt;Vue Router 是 Vue.js 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;h2&gt;带参数的动态路由匹配&lt;/h2&gt;
带参数的动态路由匹配在前端开发中，动态路由是指根据 URL 中的参数来匹配不同的路由规则。
这可以让我们根据不同的参数来渲染不同的页面或组件。
带参数的动态路由匹配是指在路由规则中使用占位符来匹配 URL 中的参数。占位符以冒号 (:) 开头，后面跟参数名称。
例如，以下路由规则定义了一个名为 id 的参数：
&lt;pre&gt;
&lt;code&gt;
{
  path: &apos;/user/:id&apos;,
  component: User
}
&lt;/code&gt;
&lt;/pre&gt;
当用户访问 /user/123 URL 时，id 参数将被赋值为 123，然后路由器会将该参数传递给 User 组件。
在 User 组件中，我们可以通过 this.$route.params 对象来访问参数值：
&lt;pre&gt;
&lt;code&gt;
export default {
  name: &apos;User&apos;,
  props: {},
  data () {
    return {
      user: {}
    }
  },
  created () {
    const id = this.$route.params.id
    // 使用 id 获取用户信息
    this.getUser(id)
  },
  methods: {
    getUser (id) {
      // ...
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;嵌套路由&lt;/h2&gt;
嵌套路由是指在一个路由规则中包含另一个路由规则。这可以让我们将路由组织成树形结构，以便更好地管理大型应用。
&amp;lt;/br&amp;gt;
在 Vue Router 中，我们可以通过 children 属性来定义嵌套路由。例如，以下代码定义了一个嵌套路由
&lt;pre&gt;&lt;code&gt;

const router = new VueRouter({
  routes: [
    {
      path: &apos;/&apos;,
      component: Home,
      children: [
        {
          path: &apos;user&apos;,
          component: User
        },
        {
          path: &apos;about&apos;,
          component: About
        }
      ]
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;
在这个示例中，/ 路由是一个父路由，它包含两个子路由：/user 和 /about。

&lt;h3&gt;嵌套路由的使用&lt;/h3&gt;

我们可以使用嵌套路由来实现以下功能：
&lt;ol&gt;
&lt;li&gt;在同一个页面中显示不同的内容&lt;/li&gt;
&lt;li&gt;在不同的页面之间导航&lt;/li&gt;
&lt;li&gt;控制子路由的显示和隐藏&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h2&gt;编程式导航&lt;/h2&gt;
编程式导航是指通过代码来控制路由导航，而不是使用 &lt;router-link&gt; 等声明式导航组件。
&lt;h3&gt;router.push() 和 router.replace()&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;
// 使用 router.push() 方法导航到 /user
router.push(&apos;/user&apos;)

// 使用 router.replace() 方法导航到 /about
router.replace(&apos;/about&apos;)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;router.go()&lt;/h3&gt;
router.go() 方法用于向前或向后跳转历史记录堆栈中的记录
&lt;pre&gt;
&lt;code&gt;
// 向前跳转一个记录
router.go(1)

// 向后跳转一个记录
router.go(-1)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;router.back() 和 router.forward()&lt;/h3&gt;
router.back() 和 router.forward() 方法分别用于向后和向前跳转历史记录堆栈中的记录。

&lt;li&gt;
&lt;h2&gt;命名路由和重定向路由&lt;/h2&gt;
&lt;h3&gt;命名路由&lt;/h3&gt;
在 Vue Router 中，我们可以通过 name 属性来为路由规则指定名称。例如，以下代码定义了一个命名路由
&lt;pre&gt;&lt;code&gt;
{
  path: &apos;/user&apos;,
  name: &apos;user&apos;,
  component: User
}
&lt;/code&gt;&lt;/pre&gt;
我们可以通过 router.push({ name: &apos;user&apos; }) 的方式来跳转到名为 user 的路由
&lt;h3&gt;重定向路由&lt;/h3&gt;
在 Vue Router 中，我们可以通过 redirect 属性来定义重定向路由。例如，以下代码定义了一个重定向路由：
&lt;pre&gt;&lt;code&gt;
{
  path: &apos;/login&apos;,
  redirect: &apos;/home&apos;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;


&lt;li&gt;
&lt;h2&gt;路由守卫&lt;/h2&gt;
路由守卫 是 Vue Router 提供的一种机制，用于在导航过程中执行一些操作。我们可以使用路由守卫来实现以下功能：
&lt;ol&gt;
&lt;li&gt;登录拦截&lt;/li&gt;
&lt;li&gt;权限控制&lt;/li&gt;
&lt;li&gt;数据预加载&lt;/li&gt;
&lt;li&gt;页面跳转前/后的确认&lt;/li&gt;
&lt;/ol&gt;
Vue 3 中提供了三种类型的路由守卫：
&lt;h3&gt;全局路由守卫&lt;/h3&gt;
全局路由守卫可以用于实现登录拦截、权限控制等功能。
&lt;pre&gt;&lt;code&gt;
router.beforeEach((to, from, next) =&amp;gt; {
  // 判断用户是否登录
  if (isAuthenticated()) {
    next()
  } else {
    next(&apos;/login&apos;)
  }
})
&lt;/code&gt;&lt;/pre&gt;
在这个示例中，我们使用 beforeEach 全局路由守卫来判断用户是否登录。如果用户已登录，则允许导航继续；如果用户未登录，则重定向到 /login URL。

&lt;h3&gt;组件内路由守卫&lt;/h3&gt;
路由独享守卫可以用于实现特定的路由导航逻辑。
&lt;pre&gt;&lt;code&gt;
export default {
  name: &apos;User&apos;,
  props: {},
  data () {
    return {
      user: {}
    }
  },
  beforeRouteEnter (to, from, next) {
    // 获取用户 ID
    const id = to.params.id

    // 获取用户信息
    this.getUser(id)

    next()
  },
  created () {
    // ...
  },
  methods: {
    getUser (id) {
      // ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

在这个示例中，我们使用 beforeRouteEnter 组件内守卫来获取用户信息。

&lt;h3&gt;路由独享守卫&lt;/h3&gt;
路由独享守卫可以用于实现特定的路由导航逻辑。
&lt;pre&gt;&lt;code&gt;
const router = new VueRouter({
  routes: [
    {
      path: &apos;/user/:id&apos;,
      component: User,
      beforeEnter: (to, from, next) =&amp;gt; {
        // 获取用户 ID
        const id = to.params.id

        // 判断用户是否存在
        if (userExists(id)) {
          next()
        } else {
          next(&apos;/404&apos;)
        }
      }
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;
在这个示例中，我们使用 beforeEnter 路由独享守卫来判断用户是否存在。如果用户存在，则允许导航继续；如果用户不存在，则重定向到 /404 URL。
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;路由懒加载&lt;/h2&gt;
Vue Router 支持路由懒加载，这意味着只有当路由被访问时，才会加载对应的组件。这样可以提高应用程序的性能，因为只有需要的组件才会被加载。
&lt;pre&gt;&lt;code&gt;
const User = () =&amp;gt; import(&apos;./components/User.vue&apos;)
const router = new VueRouter({
  routes: [
    {
      path: &apos;/user/:id&apos;,
      component: User
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;
在这个示例中，我们使用 import 函数来懒加载 User 组件。只有当访问 /user/:id URL 时，才会加载 User 组件。
&lt;/li&gt;
&lt;/router-link&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Sun, 05 Nov 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/11/05/2024/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/11/05/2024/</guid>
        
        <category>Web</category>
        
        <category>JavaScript</category>
        
        <category>Vue-router</category>
        
        
      </item>
    
      <item>
        <title>箭头函数与普通函数的区别</title>
        <description>&lt;h1&gt;箭头函数（Arrow Function）与普通函数（Regular Function）在语法和功能上有一些区别。&lt;/h1&gt;

&lt;ol&gt;

&lt;li&gt;语法简洁性：箭头函数使用箭头（`=&amp;gt;`）来定义函数，语法更加简洁，可以省略`function`关键字和大括号。例如：
 &lt;pre&gt;
 &lt;code&gt;
 // 普通函数
 function add(a, b) {
 return a + b;
 }

 // 箭头函数
 const add = (a, b) =&amp;gt; a + b;
 &lt;/code&gt;
 &lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
 this 绑定：箭头函数没有自己的 `this` 值，它会捕获当前上下文的 `this` 值，即定义时所在的对象或函数。而普通函数的 `this` 值在运行时根据调用方式动态确定。箭头函数也不支持call()与apply()函数特性。
&lt;/li&gt;
&lt;li&gt; arguments 对象：箭头函数没有自己的 `arguments` 对象，但可以使用剩余参数（rest parameters）来达到类似的效果。普通函数则有自己的 `arguments` 对象。&lt;/li&gt;
&lt;li&gt; 箭头函数不能用作构造函数（constructor）或生成器函数（generator function）。&lt;/li&gt;
&lt;li&gt; 箭头函数没有原型属性（prototype property）。&lt;/li&gt;
 &lt;/ol&gt;
&lt;h4&gt;总的来说，箭头函数适用于简单的函数表达式和回调函数的定义，具有简洁的语法和固定的上下文绑定；而普通函数则适用于更复杂的函数逻辑、作为构造函数和对象方法等场景，具有更多的语法特性和灵活性。&lt;/h4&gt;

</description>
        <pubDate>Sat, 04 Nov 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/11/04/2023/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/11/04/2023/</guid>
        
        <category>Web</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>Javascript中的数组</title>
        <description>&lt;h2 id=&quot;操作方法&quot;&gt;操作方法&lt;/h2&gt;

&lt;p&gt;数字的基本操作可以归纳为增删改查。&lt;/p&gt;

&lt;h3 id=&quot;增&quot;&gt;增&lt;/h3&gt;
&lt;h4 id=&quot;push&quot;&gt;push&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;方法用于在数组的末尾添加一个或多个元素，并返回添加新元素后的数组长度。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3];
arr.push(4);
console.log(arr);
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;unshift&quot;&gt;unshift&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshift&lt;/code&gt;方法用于在数组的头部添加一个或多个元素，并返回添加新元素后的数组长度。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3];
arr.unshift(4);
console.log(arr);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;####splice
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splice&lt;/code&gt;方法用于删除原数组的一部分成员，并可以在删除的位置添加入新的数组成员，返回值是被删除的元素。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5,6,7];
arr.splice(4);
console.log(arr);
结果为:
[1,2,3,4]

const fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];

// 在第三个位置添加一个元素
fruits.splice(2, 0, &quot;Grape&quot;);

console.log(fruits); // [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Grape&quot;, &quot;Apple&quot;, &quot;Mango&quot;]

// 在数组末尾添加多个元素
fruits.splice(fruits.length, 0, &quot;Watermelon&quot;, &quot;Pineapple&quot;);

console.log(fruits); // [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Grape&quot;, &quot;Apple&quot;, &quot;Mango&quot;, &quot;Watermelon&quot;, &quot;Pineapple&quot;]
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;####concat
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concat&lt;/code&gt;方法用于连接两个或多个数组，并返回一个新的数组。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3];
var arr2 = [4,5,6];
arr.concat(arr2);
console.log(arr);
结果为:
[1,2,3,4,5,6]
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;删&quot;&gt;删&lt;/h3&gt;
&lt;h4 id=&quot;pop&quot;&gt;pop&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt;方法用于删除数组的最后一个元素，并返回删除的元素。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3];
arr.pop();
console.log(arr);
//结果为:
[1,2]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;shift&quot;&gt;shift&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt;方法用于删除数组的第一个元素，并返回删除的元素。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3];
arr.shift();
console.log(arr);
结果为:
[2,3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;slice&quot;&gt;slice&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slice&lt;/code&gt;方法用于从原数组中截取一个新的数组，并返回截取后的数组。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.slice(1,3);
console.log(arr);
结果为:
[2,3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;splice&quot;&gt;splice&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splice&lt;/code&gt;方法用于删除原数组的一部分成员，并可以在删除的位置添加入新的数组成员，返回值是被删除的元素。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.splice(1,2,&apos;a&apos;,&apos;b&apos;);
console.log(arr);
结果为:
[1, &apos;a&apos;, &apos;b&apos;, 4, 5]
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;改&quot;&gt;改&lt;/h3&gt;

&lt;h4 id=&quot;splice-1&quot;&gt;splice&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splice&lt;/code&gt;方法用于删除原数组的一部分成员，并可以在删除的位置添加入新的数组成员，返回值是被删除的元素。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.splice(1,2,&apos;a&apos;,&apos;b&apos;);
console.log(arr);
结果为:
[1, &apos;a&apos;, &apos;b&apos;, 4, 5]
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;查&quot;&gt;查&lt;/h3&gt;
&lt;h4 id=&quot;indexof&quot;&gt;indexOf&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;indexOf&lt;/code&gt;方法用于返回某个指定的字符串值在字符串中首次出现的位置。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.indexOf(3);
结果为:
2
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;lastindexof&quot;&gt;lastIndexOf&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastIndexOf&lt;/code&gt;方法用于返回某个指定的字符串值在字符串中最后出现的位置。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.lastIndexOf(3);
结果为:
2
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;includes&quot;&gt;includes&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt;方法用于判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.includes(3);
结果为
true
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;find&quot;&gt;find&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt;方法用于找出第一个符合条件的数组成员。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.find(function(value,index,arr){
  
  return value&amp;gt;3;

}
);
结果为:
4
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;findindex&quot;&gt;findIndex&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findIndex&lt;/code&gt;方法用于找出第一个符合条件的数组成员的位置。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.findIndex(function(value,index,arr){
  
  return value&amp;gt;3;

}
);
结果为:
3
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;##排序方法&lt;/p&gt;

&lt;h3 id=&quot;sort&quot;&gt;sort&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort&lt;/code&gt;方法用于对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较字符串的UTF-16代码单元值序列时构建的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.sort();
console.log(arr);
结果为:
[1, 100, 2, 200, 3, 300, 4, 400, 5, 500]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;reverse&quot;&gt;reverse&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse&lt;/code&gt;方法用于颠倒数组中元素的顺序，并返回该数组。该方法会改变原数
组。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.reverse();
console.log(arr);
结果为:
[5, 4, 3, 2, 1]
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;##迭代的方法&lt;/p&gt;
&lt;h3 id=&quot;foreach&quot;&gt;forEach&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt;方法用于调用数组的每个元素，并将元素传递给回调函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.forEach(function(value,index,arr){
  
  console.log(value);

}
);
结果为:
1
2
3
4
5
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;map&quot;&gt;map&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;方法用于调用数组的每个元素，并将元素传递给回调函数，并将回调函数的结果组成一个新数组返回。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.map(function(value,index,arr){
  
  return value*2;

}

);
结果为:
[2, 4, 6, 8, 10]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;filter&quot;&gt;filter&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;方法用于过滤掉数组中的不符合条件的元素，并将符合条件的元素组成一个新数组返回。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.filter(function(value,index,arr){
  
  return value&amp;gt;3;

}
);
结果为:
[4, 5]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;some&quot;&gt;some&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some&lt;/code&gt;方法用于检测数组中的元素是否满足指定条件（函数提供）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.some(function(value,index,arr){
  
  return value&amp;gt;3;

}
);
结果为:
true
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;every&quot;&gt;every&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;every&lt;/code&gt;方法用于检测数组中的元素是否都满足指定条件（函数提供）。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
var arr = [1,2,3,4,5];
arr.every(function(value,index,arr){
  
  return value&amp;gt;3;

}
);
结果为:
false
&lt;/code&gt;
&lt;/pre&gt;
</description>
        <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/10/12/string-number/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/10/12/string-number/</guid>
        
        <category>Array</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>深入理解微信小程序---生命周期</title>
        <description>&lt;h2 id=&quot;首先我们得了解一下什么是微信小程序&quot;&gt;首先我们得了解一下什么是微信小程序&lt;/h2&gt;
&lt;p&gt;微信小程序是腾讯在2017年推出的无需下载就可以在微信上使用的应用程序.
微信小程序具有以下特点:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;无需下载安装即可使用&lt;/li&gt;
  &lt;li&gt;微信官方提供技术支持&lt;/li&gt;
  &lt;li&gt;微信官方提供推广渠道&lt;/li&gt;
  &lt;li&gt;开发成本低&lt;/li&gt;
  &lt;li&gt;应用场景丰富&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;微信小程序的出现，改变了人们使用移动应用的方式。它让用户可以更轻松地获取和使用各种服务，也为开发者提供了新的发展机遇。&lt;/p&gt;
&lt;h2 id=&quot;微信小程序的生命周期&quot;&gt;微信小程序的生命周期&lt;/h2&gt;
&lt;p&gt;微信小程序的生命周期分为四个部分：初始化、运行、销毁和错误处理。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;初始化：当小程序启动时，会首先执行初始化操作，包括创建页面实例、设置页面数据、绑定页面事件等。&lt;/li&gt;
  &lt;li&gt;运行：当小程序启动后，会进入运行状态，此时页面实例会一直保持运行状态，直到小程序被销毁或页面被切换。&lt;/li&gt;
  &lt;li&gt;销毁：当小程序被销毁或页面被切换时，会执行销毁操作，包括释放页面资源、保存页面数据等。&lt;/li&gt;
  &lt;li&gt;错误处理：当小程序发生错误时，会执行错误处理操作，包括记录错误日志、提示用户等。
    &lt;h2 id=&quot;微信小程序的生命周期函数&quot;&gt;微信小程序的生命周期函数&lt;/h2&gt;
    &lt;p&gt;微信小程序的生命周期函数是指在小程序的不同阶段执行的函数，包括初始化、运行、销毁和错误处理等阶段。每个阶段都会执行特定的函数，以实现特定的功能。&lt;/p&gt;
    &lt;h3 id=&quot;初始化阶段&quot;&gt;初始化阶段&lt;/h3&gt;
    &lt;p&gt;初始化阶段是指在小程序启动时执行的函数，包括创建页面实例、设置页面数据、绑定页面事件等。&lt;/p&gt;
    &lt;h3 id=&quot;运行阶段&quot;&gt;运行阶段&lt;/h3&gt;
    &lt;p&gt;运行阶段是指在小程序启动后执行的函数，包括页面渲染、页面交互等。&lt;/p&gt;
    &lt;h3 id=&quot;销毁阶段&quot;&gt;销毁阶段&lt;/h3&gt;
    &lt;p&gt;销毁阶段是指在小程序被销毁或页面被切换时执行的函数，包括释放页面资源、保存页面数据等。&lt;/p&gt;
    &lt;h3 id=&quot;错误处理阶段&quot;&gt;错误处理阶段&lt;/h3&gt;
    &lt;p&gt;错误处理阶段是指在小程序发生错误时执行的函数，包括记录错误日志、提示用户等。&lt;/p&gt;
    &lt;h2 id=&quot;微信小程序的生命周期图示&quot;&gt;微信小程序的生命周期图示&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;应用的生命周期&quot;&gt;应用的生命周期&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;生命周期&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;onLaunch&lt;/td&gt;&lt;td&gt;小程序初始化完成时触发，全局只触发一次&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;onShow&lt;/td&gt;&lt;td&gt;小程序启动，或从后台进入前台显示时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;onHide&lt;/td&gt;&lt;td&gt;小程序从前台进入后台时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;onError&lt;/td&gt;&lt;td&gt;小程序发生脚本错误或 API 调用报错时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;onPageNotFound&lt;/td&gt;&lt;td&gt;小程序要打开的页面不存在时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;onUnhandledRejection()&lt;/td&gt;&lt;td&gt;小程序有未处理的 Promise 拒绝时触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;onThemeChange&lt;/td&gt;&lt;td&gt;系统切换主题时触发&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;页面的生命周期&quot;&gt;页面的生命周期&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;生命周期&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;show&lt;/td&gt;&lt;td&gt;组件所在的页面被展示时执行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hide&lt;/td&gt;&lt;td&gt;组件所在的页面被隐藏时执行&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;组件的生命周期&quot;&gt;组件的生命周期&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;生命周期&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;created&lt;/td&gt;&lt;td&gt;生命周期回调—监听页面加载&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;attached&lt;/td&gt;&lt;td&gt;生命周期回调—监听页面显示&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ready&lt;/td&gt;&lt;td&gt;生命周期回调—监听页面初次渲染完成&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;moved&lt;/td&gt;&lt;td&gt;生命周期回调—监听页面隐藏&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;detached&lt;/td&gt;&lt;td&gt;生命周期回调—监听页面卸载&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;error&lt;/td&gt;&lt;td&gt;每当组件方法抛出错误时执行&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;生命周期的执行过程&quot;&gt;生命周期的执行过程&lt;/h3&gt;

&lt;p&gt;小程序生命周期是指小程序从启动到销毁过程中所经历的各个阶段。每个阶段都会触发一个相应的生命周期回调函数，开发者可以根据需要在这些函数中执行特定的操作。&lt;/p&gt;

&lt;p&gt;小程序生命周期可以分为以下几个阶段：&lt;/p&gt;

&lt;p&gt;启动阶段：小程序启动时，会触发 App.onLaunch 函数。
显示阶段：小程序显示时，会触发 App.onShow 和 Page.onShow 函数。
隐藏阶段：小程序隐藏时，会触发 App.onHide 和 Page.onHide 函数。
销毁阶段：小程序销毁时，会触发 App.onUnload 和 Page.onUnload 函数。
以下是小程序生命周期执行顺序图：&lt;/p&gt;

&lt;p&gt;小程序生命周期执行顺序图: [移除了无效网址]&lt;/p&gt;

&lt;p&gt;具体执行顺序如下:&lt;/p&gt;

&lt;p&gt;小程序生命周期是指小程序从启动到销毁过程中所经历的各个阶段。每个阶段都会触发一个相应的生命周期回调函数，开发者可以根据需要在这些函数中执行特定的操作。&lt;/p&gt;

&lt;p&gt;小程序生命周期可以分为以下几个阶段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;启动阶段&lt;/strong&gt;：小程序启动时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onLaunch&lt;/code&gt; 函数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;显示阶段&lt;/strong&gt;：小程序显示时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onShow&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onShow&lt;/code&gt; 函数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;隐藏阶段&lt;/strong&gt;：小程序隐藏时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onHide&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onHide&lt;/code&gt; 函数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;销毁阶段&lt;/strong&gt;：小程序销毁时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onUnload&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onUnload&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下是小程序生命周期执行顺序图：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;具体执行顺序如下:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;App.onLaunch&lt;/strong&gt;：小程序启动时，会首先触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onLaunch&lt;/code&gt; 函数。该函数只会在小程序第一次启动时执行一次。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page.onLoad&lt;/strong&gt;：小程序页面加载时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onLoad&lt;/code&gt; 函数。该函数会在每次进入页面时执行一次。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page.onShow&lt;/strong&gt;：小程序页面显示时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onShow&lt;/code&gt; 函数。该函数会在每次页面显示时执行一次。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page.onHide&lt;/strong&gt;：小程序页面隐藏时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onHide&lt;/code&gt; 函数。该函数会在每次页面隐藏时执行一次。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;App.onHide&lt;/strong&gt;：小程序隐藏时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onHide&lt;/code&gt; 函数。该函数会在每次小程序隐藏时执行一次。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;App.onUnload&lt;/strong&gt;：小程序销毁时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onUnload&lt;/code&gt; 函数。该函数会在每次小程序销毁时执行一次。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page.onUnload&lt;/strong&gt;：小程序页面销毁时，会触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onUnload&lt;/code&gt; 函数。该函数会在每次页面销毁时执行一次。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onLaunch&lt;/code&gt; 函数中，可以进行一些全局的初始化操作，例如初始化数据、设置全局变量等。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onLoad&lt;/code&gt; 函数中，可以进行页面相关的初始化操作，例如获取页面参数、渲染页面内容等。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onShow&lt;/code&gt; 函数中，可以进行页面相关的显示操作，例如播放音乐、显示动画等。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onHide&lt;/code&gt; 函数中，可以进行页面相关的隐藏操作，例如停止播放音乐、隐藏动画等。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onHide&lt;/code&gt; 函数中，可以进行一些全局的清理操作，例如释放资源、保存数据等。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.onUnload&lt;/code&gt; 函数中，可以进行一些全局的销毁操作，例如关闭数据库连接、释放内存等。&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Page.onUnload&lt;/code&gt; 函数中，可以进行页面相关的销毁操作，例如清理页面数据、释放页面资源等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发者可以根据需要在这些生命周期回调函数中执行特定的操作，以实现小程序的各种功能。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Sep 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/09/03/wx2020/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/09/03/wx2020/</guid>
        
        <category>Wechat</category>
        
        <category>小程序</category>
        
        
      </item>
    
  </channel>
</rss>
